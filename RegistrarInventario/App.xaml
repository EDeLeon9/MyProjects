<Application x:Class="RegistrarInventario.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:local="clr-namespace:RegistrarInventario"
             StartupUri="/View/MainWindow.xaml">
    <Application.Resources>

        <ResourceDictionary>

            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="StylesAndTemplates\ComboBoxTemplate.xaml"/>
                <ResourceDictionary Source="StylesAndTemplates\CheckBoxTemplate.xaml"/>
                <ResourceDictionary Source="StylesAndTemplates\ButtonTemplate.xaml"/>
                <ResourceDictionary Source="StylesAndTemplates\ToggleButtonTemplate.xaml"/>
                <ResourceDictionary Source="StylesAndTemplates\TabItemTemplate.xaml"/>
            </ResourceDictionary.MergedDictionaries>

            <SolidColorBrush x:Key="mainBackground" Color="#303030"/>
            <SolidColorBrush x:Key="windowRectangleBackground" Color="#505050"/>
            <LinearGradientBrush x:Key="defaultGradientControlBackground" StartPoint="0.5,0" EndPoint="0.5,1" >
                <GradientStop Color="#8B8B8B" Offset="0"/>
                <GradientStop Color="#606060" Offset="1"/>
            </LinearGradientBrush>
            <local:DateTimeConverter x:Key="dateTimeConverter"/>
            <local:InvertBoolConverter x:Key="invertBoolConverter"/>
            <local:AddStringToDoubleConverter x:Key="addStringToDoubleConverter"/>
            <local:IntegerIsGreaterThanOneToBoolConverter x:Key="integerIsGreaterThanOneToBoolConverter"/>

            <!--Se usa Label para no aplicar el estilo a todos los TextBlock sino a todos los Label-->
            <Style TargetType="Label">
                <Setter Property="Foreground" Value="White"/>
            </Style>

            <Style TargetType="TextBox">
                <Setter Property="BorderBrush" Value="DarkGray"/>
                <Setter Property="Background" Value="{StaticResource mainBackground}"/>
                <Setter Property="Foreground" Value="White"/>
                <Setter Property="CaretBrush" Value="White"/>
            </Style>

            <Style TargetType="ComboBox">
                <Setter Property="Template" Value="{DynamicResource comboBoxTemplate}"/>
                <Setter Property="Foreground" Value="White"/>
                <!--Se cambia esta propiedad con Setter ya que en el template comboBoxTemplate hay un TemplateBinding de Background (Background="{TemplateBinding Background}")-->
                <Setter Property="Background" Value="{StaticResource defaultGradientControlBackground}"/>
                <!--Obtenido de plantilla de ComboBox editable-->
                <Style.Triggers>
                    <Trigger Property="IsEditable" Value="true">
                        <Setter Property="IsTabStop" Value="false"/>
                        <Setter Property="Padding" Value="2"/>
                        <Setter Property="Template" Value="{DynamicResource comboBoxEditableTemplate}"/>
                    </Trigger>
                </Style.Triggers>
            </Style>

            <Style TargetType="ComboBoxItem">
                <Setter Property="Foreground" Value="White"/>
            </Style>

            <Style TargetType="CheckBox">
                <Setter Property="Template" Value="{DynamicResource checkBoxTemplate}"/>
                <!--Se cambia esta propiedad con Setter ya que en el template checkBoxTemplate hay un TemplateBinding de Background (Background="{TemplateBinding Background}")-->
                <Setter Property="Background" Value="{StaticResource mainBackground}" />
                <Setter Property="BorderBrush" Value="DarkGray"/>
            </Style>

            <Style TargetType="Button">
                <Setter Property="Template" Value="{DynamicResource buttonTemplate}"/>
                <!--Se cambia esta propiedad con Setter ya que en el template buttonTemplate hay un TemplateBinding de Background (Background="{TemplateBinding Background}")-->
                <Setter Property="Background" Value="{StaticResource defaultGradientControlBackground}"/>
                <Setter Property="Foreground" Value="White"/>
            </Style>

            <Style TargetType="ToggleButton">
                <Setter Property="Template" Value="{DynamicResource toggleButtonTemplate}"/>
                <!--Se cambia esta propiedad con Setter para que sea igual al Style de los Button-->
                <Setter Property="Background" Value="{StaticResource defaultGradientControlBackground}"/>
                <Setter Property="Foreground" Value="White"/>
            </Style>

            <Style TargetType="TabItem">
                <Setter Property="Template" Value="{DynamicResource tabItemTemplate}"/>
            </Style>

            <Style TargetType="DataGrid">
                <Setter Property="Background" Value="{StaticResource mainBackground}"/>
                <Setter Property="HeadersVisibility" Value="Column"/>
                <Setter Property="IsReadOnly" Value="True"/>
                <Setter Property="CanUserAddRows" Value="False"/>
                <Setter Property="CanUserDeleteRows" Value="False"/>
                <Setter Property="SelectionMode" Value="Single"/>
                <Setter Property="AutoGenerateColumns" Value="False"/>
                <Setter Property="EnableRowVirtualization" Value="True"/>
                <Setter Property="VirtualizingPanel.IsVirtualizing" Value="True"/>
                <Setter Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="True"/>
                <Setter Property="VirtualizingPanel.VirtualizationMode" Value="Recycling"/>
                <!--Se coloca RowHeaderWidth="0" para corregir un bug cuando el scrollbar está al final y se actualiza la tabla haciendo que salgan filas descuadradas-->
                <Setter Property="RowHeaderWidth" Value="0"/>
            </Style>
            
            <Style TargetType="DataGridColumnHeader">
                <Setter Property="HorizontalContentAlignment" Value="Center"/>
                <Setter Property="Foreground" Value="White"/>
                <Setter Property="Background" Value="{StaticResource defaultGradientControlBackground}"/>
                <Setter Property="BorderBrush" Value="{StaticResource mainBackground}"/>
                <Setter Property="BorderThickness" Value="0,0,1,0"/>
                <Setter Property="ContentTemplate">
                    <Setter.Value>
                        <DataTemplate>
                            <TextBlock Text="{Binding}" TextWrapping="Wrap" TextAlignment="Center" Margin="0,3"/>
                        </DataTemplate>
                    </Setter.Value>
                </Setter>
                <!--Se crean triggers ya que al aplicar Background se pierde el estilo de bordes, flechas y triggers del Header-->
                <Style.Triggers>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Setter Property="Background" Value="#50569DE5"/>
                    </Trigger>
                    <Trigger Property="IsPressed" Value="True">
                        <Setter Property="Background">
                            <Setter.Value>
                                <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1" >
                                    <GradientStop Color="#D00E141B" Offset="0"/>
                                    <GradientStop Color="#D024313E" Offset="1"/>
                                </LinearGradientBrush>
                            </Setter.Value>
                        </Setter>
                    </Trigger>
                </Style.Triggers>
            </Style>

            <Style TargetType="DataGridRow">
                <Setter Property="Background" Value="{StaticResource mainBackground}"/>
                <Setter Property="Foreground" Value="White"/>
                <Style.Triggers>
                    <Trigger Property="IsMouseOver" Value="True">
                        <!--<Setter Property="Background" Value="#204169E1"/>-->
                        <Setter Property="Background" Value="#282979A0"/>
                        <Setter Property="Foreground" Value="White"/>
                    </Trigger>
                </Style.Triggers>
            </Style>
            
            <!--El estilo es explícito (con x:Key) ya que si se deja implícito no se aplica a los DataGridCell con estilo propio-->
            <!--Agregar un Style basado en este Style en los Resource del DataGrid-->
            <Style x:Key="dataGridCellStyle" TargetType="DataGridCell">
                <!--Se usa para que el texto se pueda centrar verticalmente-->
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="DataGridCell">
                            <!--Se usa {TemplateBinding Background} para que muestre los colores de la selección-->
                            <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" >
                                <ContentPresenter VerticalAlignment="Center" Margin="2"/>
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Style.Triggers>
                    <Trigger Property="IsSelected" Value="True">
                        <Setter Property="Background" Value="#2979A0"/>
                        <Setter Property="Foreground" Value="White"/>
                        <Setter Property="BorderBrush" Value="#2979A0"/>
                    </Trigger>
                    <Trigger Property="IsFocused" Value="True">
                        <Setter Property="BorderBrush" Value="Black"/>
                    </Trigger>
                </Style.Triggers>
            </Style>

            <Style TargetType="ListBox">
                <Setter Property="Background" Value="{StaticResource mainBackground}"/>
                <Setter Property="Foreground" Value="White"/>
            </Style>

            <Style x:Key="listBoxItemMouseUpSelection" TargetType="ListBoxItem">
                <EventSetter Event="PreviewMouseDown" Handler="ListBoxItem_PreviewMouseDown"/>
                <EventSetter Event="MouseUp" Handler="ListBoxItem_MouseUp"/>
            </Style>

            <!--YA NO EXISTE scrollViewerTemplate, SI SE QUIERE CONFIGURAR LOS SCROLLBARS SE DEBE APLICAR scrollBarStyle EN LOS RESOURCES DEL SCROLLVIEWER (como se hizo en el grid y en ComboBoxTemplate.xaml)-->
            <!--Es estilo explícito (con x:Key) ya que los TextBox se desconfiguran si se hace explícito-->
            <!--<Style x:Key="scrollViewerStyle" TargetType="ScrollViewer">
                <Setter Property="Template" Value="{DynamicResource scrollViewerTemplate}"/>
            </Style>-->

            <!-- *************** Styles para los DataGridTextColumn *************** -->
            <Style x:Key="ElementStyleCenter"  TargetType="TextBlock">
                <Setter Property="HorizontalAlignment" Value="Center"/>
            </Style>
            <!--Este style funciona correctamente luego de aplicar dataGridCellStyle los Resources del DataGrid-->
            <Style x:Key="ElementStyleWrapping" TargetType="TextBlock">
                <Setter Property="TextWrapping" Value="Wrap"/>
            </Style>
            <!-- ****************************************************************** -->

        </ResourceDictionary>

    </Application.Resources>

</Application>
